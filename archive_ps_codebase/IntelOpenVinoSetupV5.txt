#Requires -RunAsAdministrator

## Copyright (C) 2024 Intel Corporation
## Author: Sanjay Aghara <sanjay.aghara@intel.com>
## This software and the related documents are Intel copyrighted materials, and your use of them is 
## governed by the express license under which they were provided to you ("License"). Unless the 
## License provides otherwise, you may not use, modify, copy, publish, distribute, disclose or 
## transmit this software or the related documents without Intel's prior written permission.
##
## This software and the related documents are provided as is, with no express or implied warranties, 
## other than those that are expressly stated in the License.

Set-StrictMode -Version 2

Function Prepend_Path ([string]$element) {
    $ENV:PATH="$element;$($ENV:PATH)"
}

Function Add_Path ([string]$element) {
	# Adds a path to $ENV:PATH unless it is already added
	$parts = $ENV:PATH -split ';'
	if (-Not ($parts -contains $element)) {
		$ENV:PATH=(($parts + $element) -join ';').Replace(';;',';')
	}
}

Function Install_Git {
	Get-Package 'Git' 2>&1 | Out-Null
	if ($?) {
		Write-Host "SKIP install (already installed): 'Git'"
		return
	}

	$gitfile="$dloadPath\Git-2.46.2-64-bit.exe"
	if ( -Not ( Test-Path $gitfile ) ) {
		C:\Windows\System32\curl.exe -L -o $gitfile "https://github.com/git-for-windows/git/releases/download/v2.46.2.windows.1/Git-2.46.2-64-bit.exe"
	}

	$config=@'
[Setup]
Lang=default
Dir=C:\Program Files\Git
Group=Git
NoIcons=0
SetupType=default
Components=ext,ext\shellhere,ext\guihere,gitlfs,assoc,assoc_sh,windowsterminal,scalar
Tasks=
EditorOption=VIM
CustomEditorPath=
DefaultBranchOption= 
PathOption=Cmd
SSHOption=OpenSSH
TortoiseOption=false
CURLOption=OpenSSL
CRLFOption=CRLFAlways
BashTerminalOption=ConHost
GitPullBehaviorOption=Merge
UseCredentialManager=Enabled
PerformanceTweaksFSCache=Enabled
EnableSymlinks=Disabled
EnablePseudoConsoleSupport=Disabled
EnableFSMonitor=Disabled
DisableStartupPrompt=No
'@

	$config_file="$dloadPath\git-install-options.ini"
	Out-File -FilePath $config_file -Encoding ascii -InputObject $config

	Start-Process $gitfile -argumentList "/norestart /nocancel /loadinf=$config_file" -wait

	if ( $? -eq $true ) {
		Write-Host "Git install completed"
	} else {
		Write-Host "Git install failed"
	}
}

Function Install_Visual_C_Redist {
	Get-ItemProperty -path 'HKLM:\Software\Microsoft\VisualStudio\14.0\VC' 2>&1 | Out-NULL
	if ($?) {
		Write-Host "SKIP already installed (VC++ Redistributable)"
		return
	}
	$exe = ".\VC_Redist.x64.exe"
    if ( -Not (Test-Path $exe) ) {
    	C:\Windows\system32\curl.exe -L -o $exe "https://aka.ms/vs/16/release/vc_redist.x64.exe"
        if ($? -eq $False) {
            Write-Host "Download failed"
            exit 1
        }
    }
	Write-Host "Installing Visual C++ Redistributable library"
    $p = Start-process -FilePath $exe -ArgumentList "/install" -Wait -PassThru
	if ($p.ExitCode -eq 0) {
		Write-Host "Install ok"
	} else {
		Write-Host "Install failed"
		exit 1
	}
}

Function Install_VSCode_plugins {
	get-command 'code'
	if ($? -eq $False) {
		Write-Host "SKIP installing plugins.  Code not found in path."
		Write-Host "Please install Visual Studio Code plugins manually:  ms-python.python and ms-toolsai.jupyter"
		return
	}
	Write-Host "Installing code plugin ms-python.python"
	code --install-extension ms-python.python
	Write-Host "Installing code plugin ms-python.jupyter"
	code --install-extension ms-toolsai.jupyter
	Write-Host "Installing code plugin ritwickdey.LiveServer"
	code --install-extension ritwickdey.LiveServer


}

Function Create_VSCode_INF ([string] $ver) {
	$infname="VSCodeUserSetup-X64-$ver.inf"
	$buf=@"
[Setup]
Lang=english
Dir=$ENV:LOCALAPPDATA\Programs\Microsoft VS Code
Group=Visual Studio Code
NoIcons=0
Tasks=associatewithfiles,addtopath
"@
	Out-File -FilePath $infname -Encoding ASCII -InputObject $buf
	Write-Host "Created file: $infname"
}

Function Install_VSCode ([string] $ver = '1.93.1') {
	Get-Package 'Microsoft Visual Studio Code*' 2>&1 | Out-Null
	if ($?) {
		$pkg = Get-Package 'Microsoft Visual Studio Code*'
		Write-Host "SKIP install (already installed): '$($pkg.name)'"
		return
	}
	# If you want the latest version use 'latest' for $ver in the URL.
	# plus you can curl the header and get the filename from the Content-Disposition field if you want to know the version before installing
	$exename="$dloadPath\VSCodeSetup-X64-$ver.exe"
	$infname="$dloadPath\VSCodeSetup-X64-$ver.inf"

	if ( -Not ( Test-Path $exename )) {
		Write-Host "Downloading $exename"
		$url="https://update.code.visualstudio.com/$ver/win32-x64/stable"
		C:\Windows\system32\curl.exe -L -o $exename $url
		if ($? -eq $False) {
			Write-Host "Failed downloading Visual Studio Code installer"
			return
		}
	} else {
		Write-Host "SKIP download of $exename (file exists)"
	}
	Create_VSCode_INF $ver

	Write-Host "Installing Visual Studio Code..."
	Start-Process -FilePath $exename -ArgumentList "/NORESTART /NOCANCEL /LOADINF=$infname" -Wait
	Get-Package 'Microsoft Visual Studio Code*' 2>&1 | Out-Null
	if ($?) {
		Write-Host "VSCode installed okay"
		$codepath = $ENV:PROGRAMFILES + '\Microsoft VS Code\bin'
		Add_Path $codepath
	} else {
		Write-Host "Failed installing VSCode"
		return
	}
}

Function Install_Cmake {
	get-package "CMake" 2>&1 | Out-Null
	if ($? -eq $True) {
		Write-Host "SKIP: CMake is installed"
		return
	}
    #Get and Install CMake 3.30.3 - https://github.com/Kitware/CMake/releases/download/v3.30.3/cmake-3.30.3-windows-x86_64.msi
	if (-Not (Test-Path "$dloadPath\cmake-3.30.3-windows-x86_64.msi")) {
    	Write-Host "Downloading CMake..."
    	Start-BitsTransfer "https://github.com/Kitware/CMake/releases/download/v3.30.3/cmake-3.30.3-windows-x86_64.msi" -Destination $dloadPath -TransferType Download
	}
	
    Write-Host "Installing CMake..."
    Start-Process -FilePath "$env:systemroot\system32\msiexec.exe" -ArgumentList "/i `"$dloadPath\cmake-3.30.3-windows-x86_64.msi`" ALLUSERS=1 ADD_CMAKE_TO_PATH=System DESKTOP_SHORTCUT_REQUESTED=1 /norestart" -Wait
    if ( $? -ne $True ) {
        Write-host "Command failed."
        exit 1
    }
}

Function Install_Python {
	get-package 'Python 3.12.6 (64-bit)' 2>&1 | Out-Null
	if ($? -eq $True) {
		Write-Host "SKIP: Python is installed"
		return
	}
	$python_license_url = 'https://docs.python.org/3/license.html'
	$prompt = "`nThe Python License can be found at $python_license_url`n`nPlease enter one of the following:`n  'accept' to accept the license`n  'show' to view the license by opening a browser to the URL, or`n  'quit' to exit`nYour choice?"
	do {
		$response = Read-Host -Prompt $prompt
		if ($response -eq 'show') {
			Start-Process $python_license_url -WindowStyle Normal
		}
		if ($response -eq 'quit') {
			Write-host "quitting"
			exit
		}
	} while ($response -ne 'accept')

    #Get and Install Python 3.12.6
	if (-Not (Test-Path "$dloadPath\python-3.12.6-amd64.exe")) {
    	Write-Host "Downloading Python 3.12.6 ..."
    	Start-BitsTransfer "https://www.python.org/ftp/python/3.12.6/python-3.12.6-amd64.exe" -Destination $dloadPath -TransferType Download
	}

    Write-Host "Installing Python 3.12.6 ..."
    Start-Process -FilePath "$dloadPath\python-3.12.6-amd64.exe" -ArgumentList "/quiet /passive PrependPath=1 InstallAllUsers=1" -Wait
    #Start-Process -FilePath "$dloadPath\python-3.12.6-amd64.exe" -ArgumentList "PrependPath=1 InstallAllUsers=1" -Wait
	get-package 'Python 3.12.6 (64-bit)' 2>&1 | Out-Null
    if ( $? -ne $True ) {
        Write-host "Python install failed.  Quitting"
        exit 1
    }
}

Function Install_OpenCV {
	if ( Test-Path ( "$OpenVinoWorkingDir\opencv" )) {
		Write-Host "SKIP: OpenCV is installed"
		return
	}
    #Get and Setup OpenCV 4.10.0
    Write-Host "Downloading OpenCV..."
    Start-BitsTransfer "https://github.com/opencv/opencv/releases/download/4.10.0/opencv-4.10.0-windows.exe" -Destination $dloadPath -TransferType Download
    Write-Host "Installing OpenCV under $OpenVinoWorkingDir"
    Start-Process -FilePath "$dloadPath\opencv-4.10.0-windows.exe" -ArgumentList "-o$OpenVinoWorkingDir -y" -Wait
    if ( $? -ne $True ) {
        Write-host "Command failed."
        exit 1
    }
}
#"https://github.com/opencv/opencv/releases/download/4.10.0/opencv-4.10.0-vc14_vc15.exe" -Destination $dloadPath -TransferType Download

Function Install_OpenVINO {
	if ( Test-Path "$OpenVinoPath\openvino_2024.4.0" ) {
		Write-Host "SKIP: OpenVINO is installed"
		return
	}
	
    Write-Host "Downloading OpenVINO 2024.4.0 ..."
    Start-BitsTransfer $OpenVinoDownloadLink -Destination "$dloadPath\openvino_2024.4.0.zip" -TransferType Download
    if ( $? -ne $True ) {
        Write-host "Command failed."
        exit 1
    }

    Write-Host "Extracting OpenVINO 2024.4.0 to $OpenVinoPath\openvino_2024.4.0"
    Expand-Archive -Path "$dloadPath\openvino_2024.4.0.zip" -DestinationPath $dloadPath -Force
    Rename-Item -Path "$dloadPath\w_openvino_toolkit_windows_2024.4.0.16579.c3152d32c9c_x86_64" -NewName "$dloadPath\openvino_2024.4.0"
    Move-Item "$dloadPath\openvino_2024.4.0" -Destination $OpenVinoPath -Force

	# why change $OpenVinoPath variable to point to the extracted download after installing in C:\Prog... ?? -ce
}

Function Install_Packages_in_Virtual_Environment() {

	$venvRoot = "$OpenVinoworkingDir\venv"

	if ( -Not ( Test-Path "$venvRoot" ) ) {
		Write-Host "Creating Virtual Environment at $venvRoot ..."
		python -m venv $venvRoot
	}

	& "$venvRoot\Scripts\activate.ps1"
	$py = (get-command python).Path

	$nightly = "openvino-nightly==2024.5.0.dev20240924"
	$reqfile = 'C:\Intel\openvino_notebooks\requirements.txt'

	# pip upgrade
	Invoke-Expression "$py -m pip install --upgrade pip"
	# packages for openvino_notebooks in general
	Invoke-Expression "$py -m pip install -r `"$reqfile`""
	# packages for 254-llm-chatbot
	Invoke-Expression "$py -m pip uninstall -q -y openvino openvino-nightly optimum optimum-intel"
	Invoke-Expression "$py -m pip install --extra-index-url 'https://download.pytorch.org/whl/cpu' 'git+https://github.com/huggingface/optimum-intel.git' 'git+https://github.com/openvinotoolkit/nncf.git' 'datasets' 'accelerate' 'openvino-nightly' 'gradio' 'onnx' 'einops' 'transformers_stream_generator' 'tiktoken' 'transformers>=4.38.1' 'bitsandbytes'"
	# packages from original script
    Invoke-Expression "$py -m pip install ipykernel requests seaborn wget onnxruntime netron py-cpuinfo py3nvml"
	# packages for 234
	Invoke-Expression "$py -m pip install 'ultralytics==8.0.43' --extra-index-url 'https://download.pytorch.org/whl/cpu'"
	#Invoke-Expression "$py -m pip install openvino-nightly --force-reinstall"

	# deactivate
}

Set-Location $PSScriptRoot  # start from where the script is located

if ( Test-Path ENV:HTTP_PROXY ) {
	[System.Console]::WriteLine('$ENV:HTTP_PROXY = {0}', $ENV:HTTP_PROXY)
} else {
	[System.Console]::WriteLine('$ENV:HTTP_PROXY is not set')
}

Import-Module BitsTransfer

$OpenVinoPath = "C:\Program Files (x86)\Intel"
$dloadPath = "$ENV:HOMEDRIVE\$ENV:HOMEPATH\Downloads\OpenVinoBins"
$OpenVinoDownloadLink = "https://storage.openvinotoolkit.org/repositories/openvino/packages/2024.4/windows/w_openvino_toolkit_windows_2024.4.0.16579.c3152d32c9c_x86_64.zip"
$OpenVinoWorkingDir = "C:\Intel"


New-Item -ItemType Directory -Path $dloadPath -ErrorAction Ignore
New-Item -ItemType Directory -Path $OpenVinoPath -ErrorAction Ignore
New-Item -ItemType Directory -Path $OpenVinoWorkingDir -ErrorAction Ignore

if (Test-Path -Path $dloadPath)
{
    ### Installing Prerequisites - BEGIN ###
	Install_Visual_C_Redist
	Install_CMake
	Install_Python
	Install_OpenCV
	Install_Git
	add_path 'C:\Program Files\Git\cmd'

    ### Installing Prerequisites - END ###
	
	Install_VSCode
	Install_VSCode_Plugins
	Install_OpenVINO

    # $OpenVinoPath = "$dloadPath\openvino_2024.4.0" 

    $python_path = "$($ENV:PROGRAMFILES)\Python312"
    $python_scripts = "$($ENV:PROGRAMFILES)\Scripts"
	Prepend_Path "$python_scripts;$python_path"

    Set-Location $OpenVinoWorkingDir
    New-Item -ItemType Directory -Path "$OpenVinoWorkingDir\omz_root" -ErrorAction Ignore

    [System.Environment]::SetEnvironmentVariable("OMZ_ROOT","$OpenVinoWorkingDir\omz_root", "User")
    Add_Path "C:\Program Files\CMake\bin;C:\Intel\OpenCV\opencv\build\bin"
    $ENV:Path | Out-Host

## why download master.zip?  It does not get used later(?).  open_model_zoo gets clone from git! -ce
#
#    #Start-BitsTransfer "https://github.com/openvinotoolkit/open_model_zoo/archive/refs/heads/master.zip" -Destination "$OpenVinoWorkingDir"
#    if ( Test-Path "$OpenVinoWorkingDir\master.zip" ) {
#        Write-Host "SKIP: Download of open_model_zoo master.zip -- file exists"
#    } else {
#        Write-Host "Downloading open_model_zoo master.zip file..."
#        C:\Windows\system32\curl.exe -L -o "$OpenVinoWorkingDir\master.zip" "https://github.com/openvinotoolkit/open_model_zoo/archive/refs/heads/master.zip"
#        if ( $? -ne $True ) {
#            Write-host "WARNING: Command failed."
#        }
#    }
# #

    get-package 'git' 2>&1 | Out-Null
    if ( $? -eq $False ) {
        Write-Host "Please manually install git and then clone repos with the following commands:"
        Write-Host "  git clone https://github.com/openvinotoolkit/open_model_zoo.git"
        Write-Host "  git clone --depth=1 https://github.com/openvinotoolkit/openvino_notebooks.git"
        Write-Host "  git clone https://github.com/microsoft/onnxruntime"
        Write-Host "  git clone --recurse-submodules https://github.com/huggingface/optimum-intel"
        exit 1
    }
        #Write-Host "  git clone --recurse-submodules https://github.com/webmachinelearning/webnn-samples"

	if ( -Not ( Test-Path "openvino_notebooks" ) ) {
    	Start-Process -FilePath "C:\Program Files\Git\bin\git.exe" -ArgumentList "clone --depth=1 https://github.com/openvinotoolkit/openvino_notebooks.git" -Wait
	} else {
		Write-Host "SKIP cloning (folder exists): openvino_notebooks"
	}

	if ( -Not ( Test-Path "open_model_zoo" ) ) {
    	Start-Process -FilePath "C:\Program Files\Git\bin\git.exe" -ArgumentList "clone --depth=1 https://github.com/openvinotoolkit/open_model_zoo.git" -Wait
	} else {
		Write-Host "Skip cloning (folder exists): open_model_zoo"
	}

	if ( -Not ( Test-Path "onnxruntime" ) ) {
    	Start-Process -FilePath "C:\Program Files\Git\bin\git.exe" -ArgumentList "clone https://github.com/microsoft/onnxruntime" -Wait
	} else {
		Write-Host "Skip cloning (folder exists): onnxruntime"
	}

	if ( -Not ( Test-Path "optimum-intel" ) ) {
    	Start-Process -FilePath "C:\Program Files\Git\bin\git.exe" -ArgumentList "clone --recurse-submodules https://github.com/huggingface/optimum-intel" -Wait
	} else {
		Write-Host "Skip cloning (folder exists): optimum-intel"
	}


	Install_Packages_in_Virtual_Environment

    Set-Location "$OpenVinoWorkingDir\openvino_notebooks"

    Write-Host "OpenVINO Installation is done. Also openvino_notebooks project has been checked out"
}
