name: 'ClamAV Security Scan'
description: 'Perform virus scanning using ClamAV'
inputs:
  checkout_directory:
    description: "checkout directory to where ingredient repo content is to be copied."
    default: "src"
  ref:
    description: "branch to checkout, by default It will take the short ref name of the branch or tag that triggered the workflow run."
    required: false
  token:
    description: "Github token to fetch source"
    required: false
  # ClamAV Parameters
  clamav_version:
    description: 'ClamAV version to use'
    required: false
    default: '1.4.1'
  report_name:
    description: 'Name of the report file'
    required: false
    default: 'clamscan-results'
  exclude_paths:
    description: 'Directories to exclude from scan, provide with a comma separated string. i.e. node_modules,.git,__pycache__'
    required: false
    default: '.git'

runs:
  using: 'composite'
  steps:
    # - name: Checkout code
    #   uses: actions/checkout@v4
    #   with:
    #     path: ${{ inputs.checkout_directory }}
    #     ref: ${{ inputs.ref || github.ref }}
    #     token: ${{ inputs.token || github.token }}

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ArtifactAIPC
        path: ./ArtifactAIPC

    - name: Show downloaded artifact content
      run: |
        echo "Listing contents of the downloaded artifact:"
        dir ./ArtifactAIPC
      shell: pwsh

    - name: Install ClamAV
      run: choco install clamav -y
      shell: pwsh

    - name: Configure freshclam.conf
      run: |
        $freshclamConfPath = "C:\ProgramData\Chocolatey\lib\clamav\tools\clamav-1.4.2.win.x64\freshclam.conf"
        $freshclamConfContent = @"
        DatabaseMirror database.clamav.net
        DatabaseDirectory C:\ProgramData\.clamav
        "@
        Set-Content -Path $freshclamConfPath -Value $freshclamConfContent
      shell: pwsh

    - name: Update ClamAV database
      run: freshclam --config-file="C:\ProgramData\Chocolatey\lib\clamav\tools\clamav-1.4.2.win.x64\freshclam.conf"
      shell: pwsh

    - name: Verify installation
      run: clamscan --version
      shell: pwsh

    - name: Check if ArtifactAIPC directory exists
      run: |
        if (Test-Path -Path "./ArtifactAIPC") {
          Write-Host "ArtifactAIPC directory exists."
        } else {
          Write-Host "ArtifactAIPC directory does not exist."
          exit 1
        }
      shell: pwsh

    - name: List contents of ArtifactAIPC directory
      run: |
        Write-Host "Listing contents of the ArtifactAIPC directory:"
        Get-ChildItem -Path "./ArtifactAIPC" -Recurse
      shell: pwsh

    - name: Run ClamAV Virus Scan
      shell: pwsh
      continue-on-error: true
      run: |
        # Define directories to exclude
        $excludeDirs = "${{ inputs.exclude_paths }}"

        # Build the --exclude-dir flags
        $excludeFlags = ""
        $dirs = $excludeDirs -split ","
        foreach ($dir in $dirs) {
          $excludeFlags += "--exclude-dir=$dir "
        }

        # Adjust scan command based on OS
        clamscan -r ArtifactAIPC $excludeFlags --verbose --detect-pua --alert-broken --log=${{ inputs.report_name }}.log

        # Check scan results
        $scanResult = $LASTEXITCODE

        Get-Content ${{ inputs.report_name }}.log

        # Fail the workflow if viruses are found
        # Exit codes: 0 = No viruses, 1 = Viruses found, 2 = Error
        if ($scanResult -eq 1) {
          Write-Host "**ClamAV**: ⚠️ Virus detected! Please review the ClamAV scan reports."
          exit 1
        } elseif ($scanResult -eq 2) {
          Write-Host "ClamAV scan encountered an error!"
        }

    - name: Upload ClamAV Scan Results
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.report_name }}
        path: ${{ inputs.report_name }}.log